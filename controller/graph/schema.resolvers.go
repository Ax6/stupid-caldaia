package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"fmt"
	"stupid-caldaia/controller/graph/model"
	"time"
)

// UpdateBoiler is the resolver for the updateBoiler field.
func (r *mutationResolver) UpdateBoiler(ctx context.Context, config model.BoilerInput) (*model.Boiler, error) {
	panic(fmt.Errorf("not implemented: UpdateBoiler - updateBoiler"))
}

// AddProgrammedInterval is the resolver for the addProgrammedInterval field.
func (r *mutationResolver) AddProgrammedInterval(ctx context.Context, interval model.ProgrammedIntervalInput) (*model.Boiler, error) {
	panic(fmt.Errorf("not implemented: AddProgrammedInterval - addProgrammedInterval"))
}

// RemoveProgrammedInterval is the resolver for the removeProgrammedInterval field.
func (r *mutationResolver) RemoveProgrammedInterval(ctx context.Context, id string) (*model.Boiler, error) {
	panic(fmt.Errorf("not implemented: RemoveProgrammedInterval - removeProgrammedInterval"))
}

// Boiler is the resolver for the boiler field.
func (r *queryResolver) Boiler(ctx context.Context) (*model.Boiler, error) {
	panic(fmt.Errorf("not implemented: Boiler - boiler"))
}

// Temperature is the resolver for the temperature field.
func (r *queryResolver) Temperature(ctx context.Context, from *time.Time, to *time.Time, position string) ([]*model.Measure, error) {
	return r.Sensors["temperatura:"+position].Get(ctx, from, to)
}

// Temperature is the resolver for the temperature field.
func (r *subscriptionResolver) Temperature(ctx context.Context, position string) (<-chan *model.Measure, error) {
	return r.Sensors["temperatura:"+position].Latest()
}

// Boiler is the resolver for the boiler field.
func (r *subscriptionResolver) Boiler(ctx context.Context) (<-chan *model.Boiler, error) {
	panic(fmt.Errorf("not implemented: Boiler - boiler"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
