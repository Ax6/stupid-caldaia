# Boiler graphql schema

type Subscription {
  boiler: BoilerInfo!
  sensor(name: String!, position: String!): Measure!
}

type Query {
  boiler: BoilerInfo!
  sensor(name: String!, position: String!): Measure
  sensorRange(
    name: String!
    position: String!
    from: Time
    to: Time
  ): [Measure!]!
  switchHistory(
    from: Time!
    to: Time!
  ): [SwitchSample!]!
  overheatingProtectionHistory(
    from: Time!
    to: Time!
  ): [OverheatingProtectionSample!]!
}

type SwitchSample {
  state: State!
  time: Time!
}

type OverheatingProtectionSample {
  isActive: Boolean!
  time: Time!
}

type Measure {
  value: Float!
  timestamp: Time!
}

type BoilerInfo {
  state: State!
  minTemp: Float!
  maxTemp: Float!
  rules: [Rule!]!
  isOverheatingProtectionActive: Boolean!
}

type Rule {
  id: ID!
  start: Time!
  duration: Duration!
  delay: Duration!
  targetTemp: Float!
  repeatDays: [Int!]!
  isActive: Boolean!
  stoppedTime: Time
}

enum State {
  ON
  OFF
  UNKNOWN
}

scalar Time

scalar Duration

# ---------------------------------------------
# Mutations
# ---------------------------------------------
type Mutation {
  updateBoiler(state: State, minTemp: Float, maxTemp: Float): BoilerInfo!
  setRule(
    id: ID
    start: Time!
    duration: Duration!
    delay: Duration!
    targetTemp: Float!
    repeatDays: [Int!]!
  ): Rule!
  stopRule(id: ID!): Boolean!
  deleteRule(id: ID!): Boolean!
}
